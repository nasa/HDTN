# Configure the pipeline stages
stages:
  - build-stage
  - test-stage
  - scan-stage

# Set global environment variables
variables:
  HDTN_SOURCE_ROOT: "$PWD"

# Build HDTN with the default configuration
# Use this for unit and integrated tests
build-default:
  stage: build-stage
  tags:
  - docker
  - linux-x86
  image: $CI_REGISTRY/hdtn-v4/hdtn/debian-base
  script:
    - mkdir -p build
    - cmake -S . -B build -DCMAKE_CXX_FLAGS="-Werror" -DCMAKE_C_FLAGS="-Werror" -DENABLE_STREAMING_SUPPORT:BOOL=ON
    - make -C build/ -j8
    - make -C build/ install
  cache:
    key: build-default-$CI_MERGE_REQUEST_TARGET_BRANCH_NAME-$CI_MERGE_REQUEST_ID
    paths:
      - build
  artifacts:
    paths:
      - build
    expire_in: 2 days
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

# Build HDTN with Visual Studio 2022
build-and-run-win:
  stage: build-stage
  tags:
    - win-x86
  script:
    - powershell -executionpolicy bypass .\building_on_windows\hdtn_windows_cicd_unit_test.ps1
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

# Build HDTN with Oracle Linux on x86_64 using shared libs
build-and-run-shared-linux-x64:
  stage: build-stage
  tags:
    - oracle-x86
  script:
    - mkdir -p build
    - cmake -S . -B build -DCMAKE_CXX_FLAGS="-Werror" -DCMAKE_C_FLAGS="-Werror" -DBUILD_SHARED_LIBS:BOOL=ON
    - make -C build/ -j8
    - export HDTN_SOURCE_ROOT=$PWD
    - ./build/tests/unit_tests/unit-tests
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

# Build HDTN with FreeBSD on x86_64
build-and-run-freebsd-x64:
  stage: build-stage
  tags:
    - freebsd-x86
  script:
    - mkdir -p build
    - cmake -S . -B build -DCMAKE_CXX_FLAGS="-Werror" -DCMAKE_C_FLAGS="-Werror" -DUSE_X86_HARDWARE_ACCELERATION:BOOL=ON -DLTP_RNG_USE_RDSEED:BOOL=ON -Dlibzmq_LIB:FILEPATH=/usr/local/lib/libzmq.so
    - make -C build/ -j8
    - export HDTN_SOURCE_ROOT=$PWD
    - ./build/tests/unit_tests/unit-tests
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

# Build HDTN with OpenBSD on x86_64
build-and-run-openbsd-x64:
  stage: build-stage
  tags:
    - openbsd-x86
  script:
    - mkdir -p build
    - cmake -S . -B build -DCMAKE_CXX_FLAGS="-Werror" -DCMAKE_C_FLAGS="-Werror" -DUSE_X86_HARDWARE_ACCELERATION:BOOL=ON -DLTP_RNG_USE_RDSEED:BOOL=ON -Dlibzmq_LIB:FILEPATH=/usr/local/lib/libzmq.so
    - make -C build/ -j8
    - export HDTN_SOURCE_ROOT=$PWD
    - ./build/tests/unit_tests/unit-tests
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

# Build HDTN with Intel Mac
build-and-run-mac-intel:
  stage: build-stage
  tags:
    - macos-x86
  script:
    - mkdir -p build
    - cmake -S . -B build -DCMAKE_CXX_FLAGS="-Werror" -DCMAKE_C_FLAGS="-Werror" -DUSE_X86_HARDWARE_ACCELERATION:BOOL=ON -DLTP_RNG_USE_RDSEED:BOOL=ON -Dlibzmq_LIB:FILEPATH=/usr/local/Cellar/zeromq/4.3.5_1/lib/libzmq.dylib -Dlibzmq_INCLUDE:PATH=/usr/local/Cellar/zeromq/4.3.5_1/include
    - make -C build/ -j8
    - export HDTN_SOURCE_ROOT=$PWD
    - ./build/tests/unit_tests/unit-tests
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

# Build HDTN with M2 Mac
build-and-run-mac-m2:
  stage: build-stage
  tags:
    - macos-arm64
  script:
    - mkdir -p build
    - cmake -S . -B build -DCMAKE_CXX_FLAGS="-Werror" -DCMAKE_C_FLAGS="-Werror" -DUSE_X86_HARDWARE_ACCELERATION:BOOL=ON -DLTP_RNG_USE_RDSEED:BOOL=OFF -Dlibzmq_LIB:FILEPATH=/opt/homebrew/lib/libzmq.dylib -Dlibzmq_INCLUDE:PATH=/opt/homebrew/include
    - make -C build/ -j8
    - export HDTN_SOURCE_ROOT=$PWD
    - ./build/tests/unit_tests/unit-tests
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

# Build HDTN with Linux Arm64 (aarch64)
build-and-run-linux-arm64:
  stage: build-stage
  tags:
    - linux-arm64
    - ubuntu-arm64
  script:
    - mkdir -p build
    - cmake -S . -B build -DCMAKE_CXX_FLAGS="-Werror" -DCMAKE_C_FLAGS="-Werror" -DUSE_X86_HARDWARE_ACCELERATION:BOOL=ON -DLTP_RNG_USE_RDSEED:BOOL=OFF
    - make -C build/ -j8
    - export HDTN_SOURCE_ROOT=$PWD
    - ./build/tests/unit_tests/unit-tests
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

# Build HDTN with C++11 only
build-cpp11:
  stage: build-stage
  tags:
    - docker
    - linux-x86
  image: $CI_REGISTRY/hdtn-v4/hdtn/debian-base
  script:
    - mkdir -p build
    - cmake -S . -B build -DHDTN_TRY_USE_CPP17:BOOL=OFF -DCMAKE_CXX_FLAGS="-Werror" -DCMAKE_C_FLAGS="-Werror"
    - make -C build/ -j8
  cache:
    key: build-cpp11-$CI_MERGE_REQUEST_TARGET_BRANCH_NAME-$CI_MERGE_REQUEST_ID
    paths:
      - build
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

# Build HDTN with extra compile options
build-extra-options:
  stage: build-stage
  tags:
  - docker
  - linux-x86
  image: $CI_REGISTRY/hdtn-v4/hdtn/debian-base
  script:
    - mkdir -p build
    - cmake -S . -B build -DUSE_WEB_INTERFACE:BOOL=OFF -DDO_STATS_LOGGING=ON -DENABLE_OPENSSL_SUPPORT=OFF -DENABLE_BPSEC=OFF -DCMAKE_CXX_FLAGS="-Werror" -DCMAKE_C_FLAGS="-Werror"
    - make -C build/ -j8
  cache:
    key: build-without-gui-$CI_MERGE_REQUEST_TARGET_BRANCH_NAME-$CI_MERGE_REQUEST_ID
    paths:
      - build
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

# Build HDTN with CivetWeb instead of Boost Beast
build-civetweb:
  stage: build-stage
  tags:
    - docker
    - linux-x86
  image: $CI_REGISTRY/hdtn-v4/hdtn/debian-base
  script:
    - mkdir -p build
    - cmake -S . -B build -DWEB_INTERFACE_USE_CIVETWEB:BOOL=ON -DCMAKE_CXX_FLAGS="-Werror" -DCMAKE_C_FLAGS="-Werror"
    - make -C build/ -j8
  cache:
    key: build-civet-$CI_MERGE_REQUEST_TARGET_BRANCH_NAME-$CI_MERGE_REQUEST_ID
    paths:
      - build
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

build-static-analysis:
  stage: build-stage
  tags:
    - cov-analysis
  script:
    - export PATH=/home/hdtn/cov-analysis-linux64-2022.6.1/bin:$PATH
    - export HDTN_SOURCE_ROOT=$PWD
    - mkdir -p build
    - cd build
    - cmake -DENABLE_STREAMING_SUPPORT:BOOL=ON -DCMAKE_BUILD_TYPE=Release ..
    - cov-build --dir idir make -j8
  cache:
    key: build-static-analysis-$CI_MERGE_REQUEST_TARGET_BRANCH_NAME-$CI_MERGE_REQUEST_ID
    paths:
      - build
  artifacts:
    paths:
      - build
    expire_in: 2 days
  rules:
    - if: $DO_MONTHLY_SLOC_COUNT == "true"
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

# Run unit tests and generate a test report
unit-test:
  stage: test-stage
  tags:
  - docker
  - linux-x86
  image: $CI_REGISTRY/hdtn-v4/hdtn/debian-base
  needs:
    - build-default
  dependencies:
    - build-default
  script:
    - ./build/tests/unit_tests/unit-tests --log_format=JUNIT --log_sink=report.xml
  artifacts:
    when: always
    paths:
      - report.xml
    reports:
      junit: report.xml
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

# Run integrated tests and generate a test report
integrated-test:
  stage: test-stage
  tags:
  - docker
  - linux-x86
  image: $CI_REGISTRY/hdtn-v4/hdtn/debian-base
  needs:
    - build-default
  dependencies:
    - build-default
  script:
    - ./build/tests/integrated_tests/integrated-tests --log_format=JUNIT --log_sink=report.xml
  artifacts:
    when: always
    paths:
      - report.xml
    reports:
      junit: report.xml
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      
# Static Analysis Legacy defects  
static-analysis-legacy:
  stage: scan-stage
  tags:
  - cov-analysis
  dependencies:
    - build-static-analysis
  needs:
    - build-static-analysis
  script:
    - git fetch --prune
    - export PATH=/home/hdtn/cov-analysis-linux64-2022.6.1/bin:$PATH
    - export files_to_scan=$(git diff --diff-filter=d --name-only origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME origin/$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME | grep '\.cpp')
    - if [ "$files_to_scan" != "" ]; then cov-run-desktop --dir build/idir --url $COV_BUILD_SERVER --auth-key-file /home/hdtn/ci-auth.key --stream HDTN-development --exit1-if-defects true --ignore-uncapturable-inputs true --present-in-reference true --all --enable-constraint-fpp --enable-fnptr --enable-virtual $files_to_scan; else echo "No files to scan"; fi
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  allow_failure: true

# Static Analysis New defects  
static-analysis-new:
  stage: scan-stage
  tags:
  - cov-analysis
  dependencies:
    - build-static-analysis
  needs:
    - build-static-analysis
  script:
    - git fetch --prune
    - export PATH=/home/hdtn/cov-analysis-linux64-2022.6.1/bin:$PATH
    - export files_to_scan=$(git diff --diff-filter=d --name-only origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME origin/$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME | grep '\.cpp')
    - if [ "$files_to_scan" != "" ]; then cov-run-desktop --dir build/idir --url $COV_BUILD_SERVER --auth-key-file /home/hdtn/ci-auth.key --stream HDTN-development --exit1-if-defects true --ignore-uncapturable-inputs true --present-in-reference false --all --enable-constraint-fpp --enable-fnptr --enable-virtual $files_to_scan; else echo "No files to scan"; fi
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'


# Static Analysis Development Defects
static-analysis-development:
  stage: scan-stage
  tags:
    - cov-analysis
  dependencies:
    - build-static-analysis
  needs:
    - build-static-analysis
  script:
    - export HDTN_SOURCE_ROOT=$PWD
    - export PATH=/home/hdtn/cov-analysis-linux64-2022.6.1/bin:$PATH
    - cov-analyze --dir build/idir --all --enable-constraint-fpp --enable-fnptr --enable-virtual --strip-path $HDTN_SOURCE_ROOT
    - cov-commit-defects --dir build/idir --url $COV_BUILD_SERVER --stream HDTN-development --auth-key-file /home/hdtn/auth-gitlab.key
  rules:
    - if: $DO_MONTHLY_SLOC_COUNT == "true"
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"


# Code test coverage
code-test-coverage:
  stage: scan-stage
  tags:
    - docker
    - linux-x86
  image: $CI_REGISTRY/hdtn-v4/hdtn/debian-base
  script:
    - export HDTN_SOURCE_ROOT=$PWD
    - mkdir -p build
    - cmake -S . -B build -DCMAKE_BUILD_TYPE=Coverage -DDO_STATS_LOGGING:BOOL=ON
    - make -C build/ -j8
    - cd build
    # Clean up lcov
    - lcov --gcov-tool /usr/bin/gcov -directory $HDTN_SOURCE_ROOT -b . --zerocounters
    # Create baseline
    - lcov --gcov-tool /usr/bin/gcov -c -i -d $HDTN_SOURCE_ROOT -b . -o coverage.base --no-external --branch-coverage --ignore-errors mismatch,negative
    # Run tests
    - ./tests/unit_tests/unit-tests
    - ./tests/integrated_tests/integrated-tests
    # Capture lcov counters and generate report
    - lcov --gcov-tool /usr/bin/gcov --directory $HDTN_SOURCE_ROOT -b . --capture --output-file coverage.capture --no-external --branch-coverage --ignore-errors mismatch,negative
    # Add baseline counters
    - lcov --gcov-tool /usr/bin/gcov -a coverage.base -a coverage.capture --output-file coverage.total --no-external --branch-coverage --ignore-errors mismatch,negative
    # Filter collected data
    - lcov --gcov-tool /usr/bin/gcov --remove coverage.total "**/unit_tests/**" "**/integrated_tests/**" "**/test/**" "**/CMakeCXXCompilerId.cpp" --output-file coverage.info --no-external --branch-coverage --ignore-errors mismatch,negative,unused
    # Generate reports
    - genhtml -o coverage coverage.info --ignore-errors source --branch-coverage --filter branch
    - gcovr --xml coverage.xml -r $HDTN_SOURCE_ROOT -e .*/unit_tests/.* -e .*/integrated_tests/.* -e .*/test/.* -e .*/CMakeCXXCompilerId.cpp --object-directory=. --gcov-ignore-parse-errors
  dependencies: []
  needs: []
  cache:
    key: code-coverage-$CI_MERGE_REQUEST_TARGET_BRANCH_NAME-$CI_MERGE_REQUEST_ID
    paths:
      - build
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: build/coverage.xml
    paths:
      - build/coverage
    expire_in: 1 week
  coverage: '/^  lines.*: (\d+\.\d+\%).*$/'
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == "schedule"

# SLOC
sloc-count:
  stage: scan-stage
  tags:
    - docker
    - linux-x86
  image: $CI_REGISTRY/hdtn-v4/hdtn/debian-base
  script:
    - git fetch --prune
    - git reset --hard origin/$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
    - ./ci/cloc.sh "origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" "origin/$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
  dependencies: []
  needs: []
  artifacts:
    expose_as: 'SLOC Counts'
    name: sloc-counts
    paths:
      - reports
    expire_in: 1 month
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'


# Monthly SLOC
monthly-sloc-count:
  stage: scan-stage
  tags:
    - docker
    - linux-x86
  image: $CI_REGISTRY/hdtn-v4/hdtn/debian-base
  script:
    # Get SLOC counts from the beginning of the previous month to now
    - git fetch --prune
    - git checkout $CI_COMMIT_BRANCH
    - git reset --hard origin/$CI_COMMIT_BRANCH
    - current_date=$(date +"%Y-%m-%d")
    - first_day_of_previous_month=$(date -d "$current_date -1 month" +"%Y-%m-01 00:00:00")
    - echo "Getting SLOC counts from $first_day_of_previous_month to now"
    - git_commit=$(git log --before="$first_day_of_previous_month" -n 1 --pretty=format:"%H")
    - ./ci/cloc.sh $git_commit "origin/$CI_COMMIT_BRANCH"
  dependencies: []
  needs: []
  artifacts:
    name: sloc-counts
    paths:
      - reports
    expire_in: 1 month
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $DO_MONTHLY_SLOC_COUNT == "true"

# Issue Count
issue-count:
  stage: scan-stage
  tags:
    - docker
    - linux-x86
  image: $CI_REGISTRY/hdtn-v4/hdtn/debian-base
  script:
    - current_date=$(date +"%Y-%m-01T00:00:00.000Z")
    - first_day_of_previous_month=$(date -d "$current_date -1 month" +"%Y-%m-01T00:00:00.000Z")
    - echo "Getting issue counts from $first_day_of_previous_month to now"
    - python3 ci/count_issues.py $first_day_of_previous_month $current_date
  dependencies: []
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $DO_MONTHLY_SLOC_COUNT == "true"

# Cyclomatic Complexity (CCM)
high-ccm:
  stage: scan-stage
  tags:
    - docker
    - linux-x86
  image: $CI_REGISTRY/hdtn-v4/hdtn/debian-base
  script:
    - git fetch --prune
    - python3 ci/detect_high_ccm.py
  dependencies: []
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'